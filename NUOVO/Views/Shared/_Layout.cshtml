@*@model IEnumerable<PROGETTO.Models.Cliente>

@{ 
    ViewBag.Title = "Index";
}*@

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title - Prova</title>
    <!--<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />-->
    <link rel="stylesheet" href="~/Content/Site.css" />
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @using Microsoft.AspNet.Identity
</head>
<body>

    <div class="page dashboard">
        <div class="leftMenu">
            <div class="menu">
                @Html.Partial("_LoginPartial")
                @*@Html.ActionLink("Reset Password","ResetPassword", "Account")*@
                <ul class="vociMenu">
                    <li>
                        <div class="inline">
                            <span class="voce"> @Html.ActionLink("Home", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })</span>
                        </div>
                    </li>
                    <li>
                        <div class="inline">
                            <span class="voce"> @Html.ActionLink("Gestione Clienti", "Index", "Clienti") </span>
                        </div>
                    </li>
                    <li class="campiFormazione">
                        <div class="inline">
                            <span class="voce">@Html.ActionLink("Gestione Commesse", "Index", "Commessa")</span>
                        </div>
                    </li>
                    <li class="campiFormazione">
                        <div class="inline">
                            <span class="voce">@Html.ActionLink("Gestione Stackholders", "Index", "Stackholder")</span>
                        </div>
                    </li>
                    <li class="campiFormazione">
                        <div class="inline">
                            <span class="voce">@Html.ActionLink("Gestione Rilevamenti", "Index", "CommessaStackholder")</span>
                        </div>
                    </li>
                    <li class="campiFormazione">
                        <div class="inline">
                            <span class="voce">@Html.ActionLink("Gestione Rischi", "Index", "CommessaRischio")</span>
                        </div>
                    </li>
                </ul>

            </div>
        </div>
        <div class="pageBody">
            <div class="container">
                @RenderBody()
                <hr />
                <footer>
                    <p>&copy; @DateTime.Now.Year - Entity & Identity Framework</p>
                </footer>
            </div>
        </div>

    </div>



    @*<script src="~/lib/jquery/dist/jquery.min.js"></script>
        <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
        <script src="~/js/site.js" asp-append-version="true"></script>*@

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)

    @section Scripts {


        <script src="~/Scripts/globalize/globalize.js"></script>
        <script src="~/Scripts/globalize/cultures/globalize.culture.@(System.Threading.Thread.CurrentThread.CurrentCulture.Name).js"></script>
        <script>
    //$.validator.methods.number = function (value, element) {
    //    return this.optional(element) ||
    //        !isNaN(Globalize.parseFloat(value));
    //}
    $(document).ready(function () {
        Globalize.culture('@(System.Threading.Thread.CurrentThread.CurrentCulture.Name)');
    });
        </script>
        <script>
            //jQuery.extend(jQuery.validator.methods, {
            //    range: function (value, element, param) {
            //        //Use the Globalization plugin to parse the value
            //        var val = Globalize.parseFloat(value);
            //        return this.optional(element) || (
            //            val >= param[0] && val <= param[1]);
            //    }
            //});
            $.validator.methods.date = function (value, element) {
                return this.optional(element) ||
                    Globalize.parseDate(value) ||
                    Globalize.parseDate(value, "yyyy-MM-dd");
            }
        </script>

        <script src="~/Scripts/globalize/globalize.js"></script>
        @*<script src="~/Scripts/globalize/cultures/globalize.culture.@(System.Threading.Thread.CurrentThread.CurrentCulture.GetCultureInfo("en-US")).js"></script>*@
        <script>
    $.validator.methods.number = function (value, element) {
        return this.optional(element) ||
            !isNaN(Globalize.parseFloat(value));
    }
    $(document).ready(function () {
        Globalize.culture('@(System.Threading.Thread.CurrentThread.CurrentCulture.Name)');
    });
        </script>
        <script>
            //jQuery.extend(jQuery.validator.methods, {
            //    range: function (value, element, param) {
            //        //Use the Globalization plugin to parse the value
            //        var val = Globalize.parseFloat(value);
            //        return this.optional(element) || (
            //            val >= param[0] && val <= param[1]);
            //    }
            //});
            $.validator.methods.date = function (value, element) {
                return this.optional(element) ||
                    Globalize.parseDate(value) ||
                    Globalize.parseDate(value, "yyyy-MM-dd");
            }
        </script>
    }
    

</body>
</html>
